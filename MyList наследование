package com.company;

import java.util.Collection;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class MyList<T> implements Collection<T> {
    class Item<T>{
        private T value;
        private Item<T> next;

        public Item(T value){
            this.value = value;
            this.next = null;
        }

        public boolean hasNext(){
            if (this.next == null){
                return false;
            }
            else {
                return true;
            }
        }

        public T getValue(){
            return value;
        }

        public void setValue(T value){
            this.value = value;
        }

        public Item<T> getNext(){
            return next;
        }

        public void setNext(Item<T> next){
            this.next = next;
        }

        @Override
        public String toString() {
            return value.toString();
        }

    }

    public int length;
    private Item<T> root;
    private Comparable comp;

    public MyList(Comparable comp){
        this.length = 0;
        this.root = null;
        this.comp = comp;
    }

    public int getLength()
    {
        return length;
    }

    public Item end(){
        if (this.root == null)
            return null;
        Item<T> p = this.root;
        while (p.hasNext()) {
            p = p.getNext();
        }
        return p;
    }

    public T Get(int index){
        Item<T> p = root;
        for (int i = 0; i<index; i++){
            p = p.getNext();
        }
        T res = p.getValue();
        return res;
    }

    @Override
    public int size() {
        return 0;
    }

    @Override
    public boolean isEmpty() {
        return (this.root == null ? true : false);
    }

    @Override
    public boolean contains(Object o) {
        return false;
    }

    @Override
    public Iterator<T> iterator() {
        return null;
    }

    @Override
    public Object[] toArray() {
        return new Object[0];
    }

    @Override
    public <T1> T1[] toArray(T1[] a) {
        return null;
    }

    @Override
    public boolean add(T pValue){
        Item<T> newItem = new Item<T>(pValue);
        Item<T> iter = this.end();
        if (iter == null)
            this.root = newItem;
        else
            iter.setNext(newItem);
        this.length += 1;

        return true;
    }

    @Override
    public boolean remove(Object o) {
        return false;
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean addAll(Collection<? extends T> c) {
        return false;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        return false;
    }

    @Override
    public void clear() {

    }

    public String toString() {
        String result = "[";
        if (this.root == null) {
            return null;
        }
        else {
            Item<T> iter = this.root;
            while (iter.hasNext()) {
                result += iter.toString() + ", ";
                iter = iter.getNext();
            }
            result += iter.toString();
        }
        result += "]";
        return result;
    }
